(load "kadena_repl_sandbox/kda-env/init.repl")
(load "init.repl")

; Init Bro
(begin-tx)
(use BRO_NS.bro)
(env-sigs [{'key:"gov", 'caps:[(INIT)]}])

(env-data {'ks-ps:["pres-sales-key"], 'ks-tr:["treasury-key"], 'ks-liqu:["liquidity-key"] })

(env-chain-data {"chain-id":"2"})
(init-supply BRO_NS.bro-pre-sales.BRO-RESERVE-ACCOUNT  BRO_NS.bro-pre-sales.BRO-RESERVE-GUARD
             "treasury"  (read-keyset 'ks-tr)
             "liquidity" (read-keyset 'ks-liqu))
(commit-tx)

; Before pre-sales
(begin-tx)
(use BRO_NS.bro-pre-sales)

(env-chain-data {'block-time:(time "2024-03-30T00:00:00Z")})
(env-data {'alice-ks:["alice-key"]})

(expect-failure "Reservations not started" "Reservation can only be done in Phase 1 or 2"
                (reserve-batch "alice"))

(expect-failure "Sales not started" "Not possible to buy"
                (buy "alice" (read-keyset 'alice-ks)))

(commit-tx)

; Sales Phase 0
(begin-tx)
(use BRO_NS.bro-pre-sales)
(env-chain-data {'block-time:(time "2024-05-08T00:00:00Z")})
(env-data {'alice-ks:["alice-key"], 'bob-ks:["bob-key"]})

;Without signature
(expect-failure "No signature" "Keyset failure"
                (reserve-batch "alice"))

(env-sigs [{'key:"sales", 'caps:[(SALES-OPERATOR)]}])

; Reserve for alice
(reserve-batch "alice")
(expect-that "Reserved =1" (compose (at 'reserved) (= 1)) (get-counters))
(expect "No btachs available for sale" 0 (available-for-free-sales))

; Bob is not reserved and cannot buy
(expect-failure "Bob has not reserverd" "Not possible to buy"
                (buy "bob" (read-keyset 'bob-ks)))

; But alice can buy
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" SALES-ACCOUNT 10.0)]}])
(buy "alice" (read-keyset 'alice-ks))

(expect "Alice has paid 10.0 KDA" 990.0 (coin.get-balance "alice"))

(expect-that "Reserved = 0" (compose (at 'reserved) (= 0)) (get-counters))
(expect-that "Sold = 1" (compose (at 'sold) (= 1)) (get-counters))
(commit-tx)

;------------------------------------------------------------------------------*
; Sales Phase 1
(begin-tx)
(use BRO_NS.bro-pre-sales)

(env-data {'carol-ks:["carol-key"], 'dave-ks:["dave-key"]})
(env-chain-data {'block-time:(time "2024-05-15T00:00:00Z")})

(env-sigs [{'key:"sales", 'caps:[(SALES-OPERATOR)]}])

; Try to reserve a new batch for alice
(expect-failure "Only 1 reservation per account" "Only 1 reservation per account"
                (reserve-batch "alice"))

; But for carol it works
(reserve-batch "carol")


; Dave buy without reservation: Ok because we are in phase 1
(env-sigs [{'key:"dave-key", 'caps:[(coin.TRANSFER "dave" SALES-ACCOUNT 10.0)]}])
(buy "dave" (read-keyset 'dave-ks))

(expect "Dave has paid 10.0 KDA" 990.0 (coin.get-balance "dave"))

; At this point, we have 1 reservation (carol) , and 2 batchs sold (alice and dave)
; We should have 47 batches available, let verify it
(expect-that "Reserved = 1" (compose (at 'reserved) (= 1)) (get-counters))
(expect-that "Sold = 2" (compose (at 'sold) (= 2)) (get-counters))
(expect "47 batches avauilable" 47 (available-for-free-sales))

(commit-tx)

;------------------------------------------------------------------------------*
; Sales Phase 2
(begin-tx)
(use BRO_NS.bro-pre-sales)
(env-chain-data {'block-time:(time "2024-05-18T00:00:00Z")})

; Reservation are canceled, so now we should have 98 batches available
(expect "98 batches avauilable" 98 (available-for-free-sales))

; Alice can now buy a second batch
(env-data {'alice-ks:["alice-key"], 'bob-ks:["bob-key"]})
(env-sigs [{'key:"alice-key", 'caps:[(coin.TRANSFER "alice" SALES-ACCOUNT 10.0)]}])
(buy "alice" (read-keyset 'alice-ks))

(expect "Alice has paid 10.0 + 10.0 KDA" 980.0 (coin.get-balance "alice"))

; Now 1 batch less
(expect "98 batches avauilable" 97 (available-for-free-sales))

(commit-tx)


;------------------------------------------------------------------------------*
; And launch
(begin-tx)
(use BRO_NS.bro-pre-sales)
(use BRO_NS.bro)

(env-chain-data {'block-time:(time "2024-05-22T00:00:00Z")})
(env-sigs [{'key:"sales", 'caps:[(SALES-OPERATOR)]}])

(print (get-sales))
(end-sales)

(expect "Alice balance is 0.8: 2 batches" 0.8 (get-balance "alice"))
(expect "Dave balance is 0.4: 1 batch" 0.4 (get-balance "dave"))

; Treasury should receive the unsold
(expect "Treasury balance is 40.0 - 1.2 = 18.8" 38.8 (try 0.0 (get-balance BRO_NS.bro-treasury.TREASURY-ACCOUNT)))

; Liquidity account in KDA should receive the income
(expect "Treasury balance is 3 batchs * 10 = 30.0" 30.0 (coin.get-balance BRO_NS.bro-treasury.LIQUIDITY-ACCOUNT))
